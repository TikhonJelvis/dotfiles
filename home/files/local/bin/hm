#!/usr/bin/env bash

# MIT License

# Copyright (c) 2017-2020 Robert Helgesson and Home Manager contributors

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Cut-down version of home-manager script from
# https://github.com/nix-community/home-manager/blob/master/home-manager/home-manager

function setWorkDir() {
    if [[ ! -v WORK_DIR ]]; then
        WORK_DIR="$(mktemp --tmpdir -d home-manager-build.XXXXXXXXXX)"
        # shellcheck disable=2064
        trap "rm -r '$WORK_DIR'" EXIT
    fi
}

function doBuildAttr() {
    local extraArgs=("$@")

    for p in "${EXTRA_NIX_PATH[@]}"; do
        extraArgs=("${extraArgs[@]}" "-I" "$p")
    done

    if [[ -v VERBOSE ]]; then
        extraArgs=("${extraArgs[@]}" "--show-trace")
    fi

    nix-build \
        "<home-manager/home-manager/home-manager.nix>" \
        "${extraArgs[@]}" \
        "${PASSTHROUGH_OPTS[@]}" \
        --argstr confPath "$HOME_MANAGER_CONFIG" \
        --argstr confAttr "$HOME_MANAGER_CONFIG_ATTRIBUTE"
}

function doBuild() {
    if [[ ! -w . ]]; then
        errorEcho "Cannot run build in read-only directory";
        return 1
    fi

    setWorkDir

    doBuildAttr --attr activationPackage
}

function doSwitch () {
    setWorkDir

    # Build the generation and run the activate script. Note, we
    # specify an output link so that it is treated as a GC root. This
    # prevents an unfortunately timed GC from removing the generation
    # before activation completes.
    local generation
    generation="$WORK_DIR/generation"

    doBuildAttr --out-link "$generation" \
                --attr activationPackage \
        && "$generation/activate"
}
function doHelp() {
    echo "Usage: $0 [OPTION] COMMAND"
    echo
    echo "Options"
    echo
    echo "  -f FILE      The home configuration file."
    echo "               Default is '~/.config/nixpkgs/home.nix'."
    echo "  -A ATTRIBUTE Optional attribute that selects a configuration"
    echo "               expression in the configuration file."
    echo "  -I PATH      Add a path to the Nix expression search path."
    echo "  -b EXT       Move existing files to new path rather than fail."
    echo "  -v           Verbose output"
    echo "  -n           Do a dry run, only prints what actions would be taken"
    echo "  -h           Print this help"
    echo
    echo "Options passed on to nix-build(1)"
    echo
    echo "  --cores NUM"
    echo "  --keep-failed"
    echo "  --keep-going"
    echo "  --max-jobs NUM"
    echo "  --option NAME VALUE"
    echo "  --show-trace"
    echo "  --(no-)substitute"
    echo
    echo "Commands"
    echo
    echo "  help         Print this help"
    echo
    echo "  build        Build configuration into result directory"
    echo
    echo "  switch       Build and activate configuration"
}

readonly NIX_STATE_DIR="${NIX_STATE_DIR:-/nix/var/nix}"

EXTRA_NIX_PATH=()
HOME_MANAGER_CONFIG_ATTRIBUTE=""
PASSTHROUGH_OPTS=()
COMMAND=""
COMMAND_ARGS=()

while [[ $# -gt 0 ]]; do
    opt="$1"
    shift
    case $opt in
        build|switch)
            COMMAND="$opt"
            ;;
        -A)
            HOME_MANAGER_CONFIG_ATTRIBUTE="$1"
            shift
            ;;
        -I)
            EXTRA_NIX_PATH+=("$1")
            shift
            ;;
        -b)
            export HOME_MANAGER_BACKUP_EXT="$1"
            shift
            ;;
        -f|--file)
            HOME_MANAGER_CONFIG="$1"
            shift
            ;;
        -h|--help)
            doHelp
            exit 0
            ;;
        -n|--dry-run)
            export DRY_RUN=1
            ;;
        --option)
            PASSTHROUGH_OPTS+=("$opt" "$1" "$2")
            shift 2
            ;;
        --max-jobs|--cores)
            PASSTHROUGH_OPTS+=("$opt" "$1")
            shift
            ;;
        --keep-failed|--keep-going|--show-trace\
            |--substitute|--no-substitute)
            PASSTHROUGH_OPTS+=("$opt")
            ;;
        -v|--verbose)
            export VERBOSE=1
            ;;
        *)
            errorEcho "$0: unknown option '$opt'"
            errorEcho "Run '$0 --help' for usage help"
            exit 1
            ;;
    esac
done

if [[ -z $COMMAND ]]; then
    doHelp >&2
    exit 1
fi

case $COMMAND in
    build)
        doBuild
        ;;
    switch)
        doSwitch
        ;;
    help)
        doHelp
        ;;
    *)
        errorEcho "Unknown command: $COMMAND"
        doHelp >&2
        exit 1
        ;;
esac
